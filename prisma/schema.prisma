generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  mobile    String   @unique
  address   String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  carts     Cart[]
  payments  Payment[]
  wishlists Wishlist[]
  reviews   Review[]
  auditLogs AuditLog[]
}

enum Role {
  ADMIN
  USER
}

model Product {
  id          String   @id @default(uuid())
  title       String
  images      String[] // Array of image URLs
  description String
  rating      Float    @default(0.0)
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems    OrderItem[]
  cartItems     CartItem[]
  categoryId    String?
  category      Category?      @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payment  Payment?
  delivery Delivery?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@unique([orderId, productId]) // Ensure no duplicate product in the same order
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int

  // Relations
  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id])

  @@unique([cartId, productId]) // Ensure no duplicate product in the same cart
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  userId    String
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User?          @relation(fields: [userId], references: [id])
  items WishlistItem[]
}

model WishlistItem {
  id         String @id @default(uuid())
  wishlistId String
  productId  String

  // Relations
  product  Product  @relation(fields: [productId], references: [id])
  wishlist Wishlist @relation(fields: [wishlistId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  userId    String?
  details   Json
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Float
  expiration DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Delivery {
  id          String         @id @default(uuid())
  orderId     String         @unique
  status      DeliveryStatus @default(PENDING)
  estimatedAt DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
